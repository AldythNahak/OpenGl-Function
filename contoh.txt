#include<windows.h>
#include <glut.h>
#include <stdlib.h>
#include <math.h>

#include <math.h>
#define PI 3.1415927

int w = 400, h = 400, z = -10, x = 0, y = -1;
int x1 = 0, y2 = 0, sudut = 0, z1 = 0;

float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;

bool mouseDown = false;
int is_depth;
void mouseMotion(int x, int y);
void mouse(int button, int, int, int);
void init(void);
void tampil(void);
void keyboard(unsigned char, int, int);
void ukuran(int, int);


void init(void)
{
	glClearColor(0, 0, 0, 0);
	glEnable(GL_DEPTH_TEST);
	is_depth = 1;
	glMatrixMode(GL_MODELVIEW);
	glPointSize(9.0);

}

void tampil(void)
{
	if (is_depth)
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	else
		glClear(GL_COLOR_BUFFER_BIT);

	
	glPopMatrix();
	glFlush();


	glutSwapBuffers();
}


void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
	case'a':
	case'A':
		glTranslatef(5.0, 0.0, 0.0);
		break;
	case'd':
	case'D':
		glTranslatef(-5.0, 0.0, 0.0);
		break;
	case'w':
	case'W':
		glTranslatef(0.0, 0.0, 5.0);
		break;
	case's':
	case'S':
		glTranslatef(0.0, 0.0, -5.0);
		break;
	case'q':
	case'Q':
		glTranslatef(0.0, 5.0, 0.0);
		break;
	case'e':
	case'E':
		glTranslatef(0.0, -5.0, 0.0);
		break;
	case'r':
	case'R':
		glRotatef(10.0, 0.0, 1.0, 0.0);
		break;
	case'z':
	case'Z':
		glRotatef(10.0, 1.0, 0.0, 0.0);
		break;
	case't':
	case'T':
		if (is_depth)
		{
			is_depth = 0;
			glDisable(GL_DEPTH_TEST);
		}
		else
		{
			is_depth = 1;
			glEnable(GL_DEPTH_TEST);
		}
	}
	tampil();
}


void ukuran(int lebar, int tinggi)
{
	if (tinggi == 0)tinggi = 1;
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(50.0, lebar / tinggi, 5.0, 500.0);
	glTranslatef(0.0, -5.0, -150.0);
	glMatrixMode(GL_MODELVIEW);
}

//void tampil()
//{ 
//	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);;
//  	glLoadIdentity();
//	gluLookAt(0.0f, 0.0f, 3.0f,0.0f, 0.0f, 0.0f,0.0f, 1.0f, 0.0f);
//   glRotatef(xrot, 1.0f, 0.0f, 0.0f);
///	glRotatef(yrot, 0.0f, 1.0f, 0.0f);
//	joglo();
//	glFlush();
//   glutSwapBuffers();
//}

void idle()
{
	if (!mouseDown)
	{
		xrot += 0.3f;
		yrot += 0.4f;
	}

	glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		mouseDown = true;
		xdiff = x - yrot;
		ydiff = -y + xrot;
	}
	else
		mouseDown = false;
}

void mouseMotion(int x, int y)
{
	if (mouseDown)
	{
		yrot = x - xdiff;
		xrot = y + ydiff;

		glutPostRedisplay();
	}
}

int main(int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(800, 600);
	glutInitWindowPosition(250, 80);
	glutCreateWindow("KAMPUS");
	init();
	glutDisplayFunc(tampil);
	glutReshapeFunc(ukuran);
	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutIdleFunc(tampil);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}